A parent => its child:
At level n (n starts from 1), the index ranges from
    2 ^ (n - 1) - 1
to (exclusive)
    2 ^ n - 1
For the level (n + 1), there should be a shift of
    (i - 2 ^ (n - 1) + 1) * 2
thus the children of the node at index i is:
    [2 ^ n - 1 + (i - 2 ^ (n - 1) + 1) * 2,
     2 ^ n - 1 + (i - 2 ^ (n - 1) + 1) * 2 + 1]
which is simplified to
    [2 * i + 1,
     2 * i + 2].
Similarly, the children of the node at index i, with the leaf count as m:
    [m ^ n - 1 + (i - m ^ (n - 1) + 1) * m,
     m ^ n - 1 + (i - m ^ (n - 1) + 1) * m + m - 1],
which is simplified to
    [m * i + m - 1,
     m * i + 2 * m - 2].
---
From a child's index, in the reverse way, we could do:
    i = 2 * f + 1 (if the child's index i is odd)
        2 * f + 2 (if i is even)
Seen that with the odd number i, i + 1 would have the same f, we could
now assume the parent index f being equal:
    i + 1 = 2 * f + 2
  = 2 * (i + 1) / 2
  = 2 * Math.ceil((i + 1) / 2) (since i + 1 is even)
  = 2 * Math.ceil(i / 2)       (when i is odd, ceil function will round it)
which will now harmoniously unify the formula to:
    2 * Math.ceil(i / 2) = 2 * f + 2
simplified to
    f = Math.ceil(i / 2) - 1

